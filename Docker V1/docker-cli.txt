[//] Docker :-

Scenario :- Supose Developer A working a projct. His machine Config are : node 18 , monogdb , Ubuntu. Now Developer B join the team and started working on the same projct, but he have 
node 16 , postgres , windows 10. So Developer B when try run the projct he get error. Developer B also work on other project . For those projct he need node 16. So he cant upgrade to node 18

              Problem Trying to Solve - 1. Everry Developer in the team must have the same configuration
                                        2. You need to replicate your dev env to the production sever to ensure
                                            smooth operation

Solution :- Docker

Docker works on concept of  ( Containerization )

So it is a mahine under a machine which have some conatiner

[//] To Check Docker Version - Type docker -v in terminal

[//] ** First Comand To Create a Container - ** docker run -it ubuntu 
                                            *** It create a ubuntu iamge , which is run a conatiner. It like a OS




[//] Docker CLI - 

** For Image

1. docker iamges -> It shows list of the iamges that currently install on host machine

2. docker image pull ubuntu ->  It download ubuntu iamge from docker store and install in our machine

3. docker image rm <image id> -> Delete A Image by image _id 
   docker image rm <image id> -f  -> To Force Fully Delete

4. docker inspect <image id> -> Inspecting / Finding Meta Data A Image by image _id '

5. docker image prune -> Deleting Un Used Images

6. docker rmi <image> - Deleting A image by his name




** For conatiner

1. docker container ls --all -> To Show all install dcoker container installed in host machine

2. docker container ls - > To Show all install dcoker container currently running

3. docker run --name < name > ubuntu -> Create A ubuntu conatiner with desired name

4. docker container prune -> delete all stoped container

5. docker run -it --name < name > ubuntu - To Start A new conainer wirh current terminal attached

6. docker exec < docker name > < comand name >  -> To Executea a comand in conainer

7. docker start < dcoker name> -> To Start A Container

8. docker stop < dcoker name> -> To Stop A Container